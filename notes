- in current directory make a new folder named the series name - and make sure invalid charecters are not saved as folder name
- in that folder make cbz files for each chapter

if a folder in the name of the series already exists only download chapters that are not already in that folder
- first check if there isn't a folder in current directory named our series, then check if current directory itself is not named after our series - then make a new folder in current directory that is our series

use a folder, download pictures inside, create a cbr from files in folder
^call this folder working directory - create on every run, delete at end of every run

comment all methods
and global variables

also allow options like download from 000 ect.
and if they put in a chapter download from that chapter onwards ect.

what if instead of series just a chapter page is given - then just download the chapter

clean up code!!

quick fail downloading chapters - and move on don't exit

keep auto-updating desired mangas - just run the url every day automatically or whatever
store somewhere where to update from and so if you just run tmdl in that folder it'll just work on updating it

figure out images about joining scans and remove them - basiclly by hashing and comparing hashes, whatever repeats delete

-hashmap of md5-hashes of pictures and location
-at first duplicate, unzip folder delete file, rezip, remove location data from hashmap, and delete the just downloaded file, if duplicate found and location is null, only delete new one
when deleting a file allow file name to be incremented so if the user finds a missing page they can go online and find what page is missing
-hashmap stores a struct with the key, chapter and file name
-comparator is a strcmp wrapper
-change the way save file is read and all
- if new url run in the folder - update the .settings file given the name of the magnga ends up the same

improve the verbose print

impliment download of a single chapter kissMangaDownload.c:78

make a massive defines file for all the places I search for in source code to get stuff so if the site changes its easier to update

the .settings file - if it's read then that means that do not set folder name from website
also change argument error, only is a valid settings file is found you can run tmdl with no arguments

have a --version option and a update option - write and executes a script as sudo that checks github for version change

where to start load? - at series location, also save at end of normal execution and at exit

also make my own tries or suffix trees for my own searching through website source code

improve error messages


    /**
     * Check for additional content type reading first few characters from the given input stream.
     * 
     * @return the guessed MIME-type or null if the type could not be determined.
     */
    private String guessAdditionalContentTypeFromStream(InputStream is)
    {
        String mt = null;

        if (is != null) {
            try {

                // Look ahead up to 64 bytes for the longest encoded header
                is.mark(64);
                byte[] bytes = new byte[64];
                int length = is.read(bytes);
                is.reset();
                if (length == -1) {
                    return null;
                }
                if (bytes[0] == 'G' && bytes[1] == 'I' && bytes[2] == 'F' && bytes[3] == '8') {
                    mt = "image/gif";
                } else if (bytes[0] == (byte) 0x89 && bytes[1] == (byte) 0x50 && bytes[2] == (byte) 0x4E
                    && bytes[3] == (byte) 0x47 && bytes[4] == (byte) 0x0D && bytes[5] == (byte) 0x0A
                    && bytes[6] == (byte) 0x1A && bytes[7] == (byte) 0x0A) {
                    mt = "image/png";
                } else if (bytes[0] == (byte) 0xFF && bytes[1] == (byte) 0xD8 && bytes[2] == (byte) 0xFF) {
                    if ((bytes[3] == (byte) 0xE0)
                        || (bytes[3] == (byte) 0xE1 && bytes[6] == 'E' && bytes[7] == 'x' && bytes[8] == 'i'
                            && bytes[9] == 'f' && bytes[10] == 0)) {
                        mt = "image/jpeg";
                    } else if (bytes[3] == (byte) 0xEE) {
                        mt = "image/jpg";
                    }
                }
            } catch (Exception e) {
                Log.e(TAG, e.getMessage(), e, Log.DEBUG_MODE);
            }
        }
        return mt;
}
